package repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import domain.Message;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
public class MessageRepository {

    @NonNull
    private final DataSource dataSource;

    public void insert(String id, String message) throws Exception {
        String sql = "INSERT INTO messages values(seq_messages.nextval,?,?,DEFAULT)";
        try(Connection connection = dataSource.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(sql);){
            preparedStatement.setString(1, id);
            preparedStatement.setString(2, message);

            if(preparedStatement.executeUpdate() == 1) {
                connection.commit();
                return;
            }
        }
        throw new Exception("메세지 등록에 실패하였습니다.");
    }

    public List<Message> selectAllmessage() throws Exception {
        String sql = "SELECT * FROM MESSAGES";
        try(Connection connection = dataSource.getConnection();
                PreparedStatement preparedStatement = connection.prepareStatement(sql);
                ){
            try(ResultSet resultSet = preparedStatement.executeQuery();){
              ArrayList<Message> list = new ArrayList<>();
                while(resultSet.next()) {
                     list.add(getMessage(resultSet));
                }
            }
        }
        throw new Exception("메세지 불러오기 실패");
    }

    private Message getMessage(ResultSet resultset) throws Exception {
        int 
        String message = resultset.getString("message");
        
        return Message.builder()
                .id(0)
                .member_id(member_id)
                .message(message)
                .
    }

}
